import { gql, useQuery } from '@apollo/client';
import { Button, Flex, Input, Text } from '@chakra-ui/react';
import type { NextPage } from 'next';
import Head from 'next/head';
import Image from 'next/image';
import Link from 'next/link';
import { useRouter } from 'next/router';
import { useState } from 'react';
import { useForm } from 'react-hook-form';
import { supabase } from '../lib/supabaseClient';
import styles from '../styles/Home.module.css';

// const GET_USERS_QUERY = gql`
//   query Users {
//     users {
//       id
//       last_name
//       first_name
//       profile
//       updated_at
//       username
//     }
//   }
// `;

// const CREATE_USER = gql`
//   mutation ($object: users_insert_input!) {
//     insert_users_one(object: $object) {
//       first_name
//       id
//       last_name
//       password
//       profile
//       username
//     }
//   }
// `;

const Home: NextPage = () => {
  const [uploading, setUploading] = useState(false);

  const router = useRouter();

  const {
    register,
    handleSubmit,
    formState: { errors },
  } = useForm();

  const onSubmit = async (data: any) => {
    const { profile_image, ...credentials } = data;
    setUploading(true);
    if (!profile_image || profile_image.length === 0) {
      throw new Error('Select your profile image to upload');
    }
    const file = profile_image[0];
    const fileExt = file.name.split('.').pop();
    const filename = `${Date.now()}.${fileExt}`;

    try {
      let { data: imageData, error: uploadError } = await supabase.storage
        .from('fanq-user-profiles')
        .upload(filename, file);

      if (uploadError) {
        throw uploadError;
      }

      await supabase.auth.signUp(
        {
          email: credentials.email,
          password: credentials.password,
        },
        {
          data: {
            first_name: credentials.firstname,
            last_name: credentials.lastname,
            profile_image: imageData?.Key,
          },
        }
      );
      router.push('/login');
    } catch (error) {
      throw error;
    } finally {
      setUploading(false);
    }

    // await createUser({
    //   variables: {
    //     object: {
    //       id: v4(),
    //       username: credentials.email,
    //       first_name: credentials.firstname,
    //       last_name: credentials.lastname,
    //       password: credentials.password,
    //       profile: imageKey,
    //     },
    //   },
    // });
  };

  return (
    <div className={styles.container}>
      {uploading ? <>Loading...</> : null}
      <Head>
        <title>FANQ POC</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <h1 className={styles.title}>
          Welcome to <a href="https://nextjs.org">FANQ</a>
        </h1>

        <Flex justify={'center'}>
          <form onSubmit={handleSubmit(onSubmit)}>
            <Flex
              flexDirection={'column'}
              gap="4"
              marginTop={10}
              maxWidth={400}
            >
              {/* register your input into the hook by invoking the "register" function */}
              <Input
                placeholder="email"
                {...register('email', { required: true })}
              />
              <Input placeholder="firstname" {...register('firstname')} />
              <Input placeholder="lastname" {...register('lastname')} />
              {/* include validation with required or other standard HTML validation rules */}
              <Input
                type={'password'}
                placeholder="password"
                {...register('password', { required: true })}
              />
              <Input
                {...register('profile_image', { required: true })}
                type="file"
              />

              {errors && <span>Please fill in properly.</span>}
              <Button type="submit" isLoading={uploading} colorScheme="teal">
                Register
              </Button>
              <Flex>
                Already have an account?
                <Text textDecoration={'underline'} paddingLeft="5px">
                  <Link href={'/login'}> Login </Link>
                </Text>
              </Flex>
            </Flex>
          </form>
        </Flex>
      </main>

      <footer className={styles.footer}>
        <a
          href="https://vercel.com?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
          target="_blank"
          rel="noopener noreferrer"
        >
          Powered by{' '}
          <span className={styles.logo}>
            <Image src="/vercel.svg" alt="Vercel Logo" width={72} height={16} />
          </span>
        </a>
      </footer>
    </div>
  );
};

export default Home;
