import { Loading } from '@supabase/ui';
import type { NextPage } from 'next';
import Head from 'next/head';
import Image from 'next/image';
import { useState } from 'react';
import { useForm } from 'react-hook-form';
import styles from '../styles/Home.module.css';
import { supabase } from '../utils/supabaseClient';

const Home: NextPage = () => {
  const [uploading, setUploading] = useState(false);
  const {
    register,
    handleSubmit,
    watch,
    formState: { errors },
  } = useForm();

  const onSubmit = async (data: any) => {
    const { profile_image, ...credentails } = data;
    setUploading(true);
    if (!profile_image || profile_image.length === 0) {
      throw new Error('Select your profile image to upload');
    }
    const file = profile_image[0];
    const fileExt = file.name.split('.').pop();
    const filename = `${Date.now()}.${fileExt}`;

    try {
      let { data: imageData, error: uploadError } = await supabase.storage
        .from('fanq-user-profiles')
        .upload(filename, file);

      if (uploadError) {
        throw uploadError;
      }

      console.log(imageData);
    } catch (error) {
      throw error;
    } finally {
      setUploading(false);
    }

    console.log('DATA', data);
  };

  return (
    <div className={styles.container}>
      {uploading ? <>Loading...</> : null}
      <Head>
        <title>FANQ POC</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <h1 className={styles.title}>
          Welcome to <a href="https://nextjs.org">FANQ</a>
        </h1>

        <div className="form">
          <form onSubmit={handleSubmit(onSubmit)}>
            {/* register your input into the hook by invoking the "register" function */}
            <input
              placeholder="email"
              {...register('email', { required: true })}
            />

            {/* include validation with required or other standard HTML validation rules */}
            <input
              placeholder="password"
              {...register('password', { required: true })}
            />
            <input
              {...register('profile_image', { required: true })}
              type="file"
            />

            {/* errors will return when field validation fails  */}
            {errors.exampleRequired && <span>This field is required</span>}

            <input type="submit" />
          </form>
        </div>
      </main>

      <footer className={styles.footer}>
        <a
          href="https://vercel.com?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
          target="_blank"
          rel="noopener noreferrer"
        >
          Powered by{' '}
          <span className={styles.logo}>
            <Image src="/vercel.svg" alt="Vercel Logo" width={72} height={16} />
          </span>
        </a>
      </footer>
    </div>
  );
};

export default Home;
